---
title: "Take home Exercise 2"
subtitle: "Take home2 - question 4"
author: "Junseok Kim"
date: June 4 2023
date-format: medium
execute:
  warning: false
  error: false
  message: false
format:
  html:
    page-layout: full
    toc: true
    smooth-scroll: true
    code-fold: true
    code-summary: "Show the code"
    code-block-border-left: "#63B9A1"
    code-block-bg: "#f2f5f9"
    code-copy: hover
    title-block-banner: true
    fig-align: center
    reader-mode: true
---

## 1. Overview

FishEye International is collaborating with the country of Oceanus to identify companies involved in illegal fishing. They received import/export data from Oceanus' marine and fishing industries but found it to be incomplete. To aid their analysis, FishEye transformed the data into a knowledge graph. They are now seeking visualizations that provide detailed patterns for entities in the knowledge graph.

The analysis consists of two main parts. Firstly, FishEye wants to visualize temporal patterns to compare the activities of companies over time and determine if they have resumed illegal fishing under different names. Secondly, they need assistance in evaluating 12 groups of link suggestions generated by various tools, including artificial intelligence, to extend the dataset. FishEye is particularly interested in identifying new temporal patterns or anomalies that emerge when new links are added.

Through visual analytics, FishEye aims to identify companies potentially engaged in illegal fishing and protect marine species affected by it.

In line with this, this page will attempt to answer the following task under Mini-Challenge 2 of the VAST Challenge:

#### Identify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them. Limit your response to 300 words and 4 images.



### 1.1 Import Libraries and Datasets

```{r}
pacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, lubridate, tidyverse, ggiraph, treemap, treemapify)
```

```{r}
mc2_data <- 
  fromJSON("data/mc2_challenge_graph.json")
```

```{r}
tuna <- jsonlite::fromJSON("data/bundles/tuna.json")
shark <- jsonlite::fromJSON("data/bundles/shark.json")
salmon <- jsonlite::fromJSON("data/bundles/salmon.json")
salmon_wgl <- jsonlite::fromJSON("data/bundles/salmon_wgl.json")
pollock <- jsonlite::fromJSON("data/bundles/pollock.json")
mackerel <- jsonlite::fromJSON("data/bundles/mackerel.json")
lichen <- jsonlite::fromJSON("data/bundles/lichen.json")
herring <- jsonlite::fromJSON("data/bundles/herring.json")
cod2 <- jsonlite::fromJSON("data/bundles/cod2.json")
chub_mackerel <- jsonlite::fromJSON("data/bundles/chub_mackerel.json")
catfish <- jsonlite::fromJSON("data/bundles/catfish.json")
carp <- jsonlite::fromJSON("data/bundles/carp.json")
```

### 1.2 Review the imported data

```{r}
glimpse(mc2_data)
```
### 1.3 Create nodes tibble

```{r}
mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  select(id, shpcountry, rcvcountry)
```


::: callout-note
Removed columns with a large number of missing data, namely: valueofgoods_omu, volumeteu, valueofgoodsusd.
:::

### 1.4 Create edges tibble

```{r}
mc2_edges <- as_tibble(mc2_data$links) %>%
  mutate(ArrivalDate = ymd(arrivaldate)) %>%
  mutate(Year = year(ArrivalDate)) %>%
  select(source, target, ArrivalDate, Year, hscode, weightkg) %>% 
  distinct()
```

### 1.5 Check duplicates

```{r}
any(duplicated(mc2_nodes))
```

```{r}
any(duplicated(mc2_edges))
```
### 1.6 Remove duplicates

```{r}
mc2_edges_cleandupe <- mc2_edges[!duplicated(mc2_edges), ]
```

### 1.7 Clean up HS codes

```{r}
length(unique(mc2_edges$hscode))
```

::: callout-note
Removed hscodes that unlikely belong to fishery, based on https://connect2india.com/hs-classification.html. Also removed likely codes for processed foods.
:::

```{r}
mc2_edges_pure <- mc2_edges_cleandupe[grepl('^301|^302|^303|^305', mc2_edges$hscode), ]

length(unique(mc2_edges_pure$hscode))
```

### 1.8 Aggregate Edges

Perform group by 'source', 'target' and 'Year', and aggregate the total count of exchanges

```{r}
mc2_edges_aggregated <- mc2_edges_pure %>%
  group_by(source, target, Year) %>%
    summarise(weights = n(),
              sum_weightkg = sum(weightkg),
              hscode=first(hscode)) %>%
  filter(source!=target) %>%
  filter(weights > 10) %>%
  ungroup()

glimpse(mc2_edges_aggregated)
```

### 1.9 Remove targets with relationship count less than 4

```{r}
#|eval: false
#|echo: false

relationship_count <- table(mc2_edges_aggregated$target)

relationship_count_heavy <- names(relationship_count[relationship_count >= 4])

mc2_edges_aggregated <- mc2_edges_aggregated[mc2_edges_aggregated$target %in% relationship_count_heavy, ]

print(mc2_edges_aggregated)

```

### 1.10 Prepare Nodes

```{r}
id1 <- mc2_edges_aggregated %>%
  select(source) %>%
  rename(id = source)
id2 <- mc2_edges_aggregated %>%
  select(target) %>%
  rename(id = target)
mc2_nodes_extracted <- rbind(id1, id2) %>%
  distinct()
```

## 2. Create Network graphs

### 2.1 Create MC2 network graph

```{r}
mc2_graph <- tbl_graph(nodes = mc2_nodes_extracted,
                       edges = mc2_edges_aggregated,
                       directed = TRUE)
```

### 2.1.1 Check MC2 graph

```{r}
#|echo: false
mc2_graph
```

### 2.1.2 Visualize MC2 Graph

```{r}
ggraph(mc2_graph,
       layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes()) +
  theme_graph()
```

### 2.1.3 Write RDS

```{r}
write_rds(mc2_nodes_extracted, "data/mc2_nodes_extracted.rds")
write_rds(mc2_edges_aggregated, "data/mc2_edges_aggregated.rds")
write_rds(mc2_graph, "data/mc2_graph.rds")
```

### 2.1.4 Create visNetwork Graph

```{r}
edges_df <- mc2_graph %>%
  activate(edges) %>%
  as_tibble()
```

```{r}
nodes_df <- mc2_graph %>%
  activate(nodes) %>%
  as.tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)
```

```{r}
visNetwork(nodes_df,
           edges_df,
           main = "visNetwork of Nodes and Edges") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW"))
```
###2.1.5 Create Interactive VisNetwork with nodes ID Selection

```{r}
visNetwork(nodes_df,
           edges_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE)

```

## 3. Analytics

### 3.1 calculate various centrality measures

```{r}
measures_graph<- mc2_graph %>%
  activate("nodes") %>% 
  mutate(betweenness_centrality = centrality_betweenness(directed = TRUE)) %>% 
  mutate(in_deg_centrality = centrality_degree(weights = weights, 
                                               mode = "in")) %>% 
  mutate(out_deg_centrality = centrality_degree(weights = weights, 
                                               mode = "out")) %>%
  mutate(pagerank_centrality = centrality_pagerank(weights = weights,
                                                  directed = TRUE))
```

### 3.2 Top 5 Companies in terms of Betweenness Centrality

```{r}
btw_graph<- measures_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(betweenness_centrality)) %>% 
  select(id,betweenness_centrality) %>% 
  head(n=5)


DT::datatable(btw_graph, class = "compact", colnames = c("Name of Company","Betweenness Centrality"),
              caption = 'Table 1: Top 5 Companies by Betweenness Centrality')
```

### 3.3 Top 5 Companies in terms of In-degree Centrality

```{r}
in_deg_graph<- measures_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(in_deg_centrality)) %>% 
  select(id,in_deg_centrality) %>% 
  head(n=5)


DT::datatable(in_deg_graph, class = "compact", colnames = c("Name of Company","In-Degree Centrality"),
              caption = 'Table 2: Top 5 Companies by In-Degree')
```

### 3.4 Top 5 Companies interms of Out Degree Centrality

```{r}
out_deg_graph<- measures_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(out_deg_centrality)) %>% 
  select(id,out_deg_centrality) %>% 
  head(n=5)

DT::datatable(out_deg_graph, class = "compact", colnames = c("Name of Company","Out-Degree Centrality"),
              caption = 'Table 3: Top 5 Companies by Out-Degree')
```

### 3.5 Interactive graph for Top 2 Companies in terms of  in-degree Centrality 

#### 3.5.1 Prep graph

```{r}
n <- 2
top_n_in_deg_list <- measures_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(in_deg_centrality)) %>% 
  top_n(n,wt = in_deg_centrality) %>%
  pull(id)
```

```{r}
mc2_edges_agg_in <- mc2_edges_aggregated %>%
  filter(target %in% top_n_in_deg_list | source %in% top_n_in_deg_list)

```

```{r}

mc2_nodes_in <- mc2_nodes %>%
  filter (id %in% c(mc2_edges_agg_in$source, mc2_edges_agg_in$target))

```

```{r}
mc2_edges_agg_in <- mc2_edges_agg_in %>%
  group_by(source, target) %>%
  mutate(total_shipped_weightkg = sum(sum_weightkg))

```

```{r}
mc2_edges_agg_vis_in <- mc2_edges_agg_in %>% 
  rename(from = source) %>% 
  rename(to = target) %>% 
  mutate(title = paste('Total shipment weight = ',total_shipped_weightkg, "\n HSCODE =", hscode))
```

```{r}
mc2_nodes_vis_in <- mc2_nodes_in %>% 
  mutate(title = paste('shpcountry =', shpcountry, ',',
                       'rcvcountry =', rcvcountry, ',',
                       '\n In-deg = ', measures_graph$in_deg_centrality, ',',
                       "\n Betweenness =", measures_graph$betweenness_centrality, ',',
                       "\n Out-deg =", measures_graph$out_deg_centrality))
```



#### 3.5.2 Filtered Ego Network of the top 2 In-Degree companies

```{r}

#| fig-width: 12
#| fig-asp: 0.555
set.seed(1234)
visNetwork(mc2_nodes_vis_in,
           mc2_edges_agg_vis_in,
           main = "Filtered Ego Network of top 2 In-Degree companies",
           height = "600px", width = "100%") %>%
  visIgraphLayout(layout = "layout_with_kk") %>%
  visEdges(arrows = 'to',
           smooth = list(enables = TRUE,
                         type= 'straightCross'),
           shadow = FALSE,
           dash = FALSE) %>% 
  visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
             nodesIdSelection = TRUE) %>%
  visInteraction(hideEdgesOnDrag = TRUE) %>% 
  visLegend() %>%
  visLayout(randomSeed = 123)
```
```

### 3.6 Interactive graph for top 4 Out-degree centrality companies

```{r}
```{r}
n <- 4
top_n_out_list <- measures_graph %>%
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(out_deg_centrality)) %>% 
  top_n(n,wt = out_deg_centrality) %>%
  pull(id)


```


```{r}
mc2_edges_agg_out_top_n <- mc2_edges_aggregated[mc2_edges_aggregated$source %in% top_n_out_list, ]

```


```{r}

mc2_nodes_out <- mc2_nodes %>%
  filter (id %in% c(mc2_edges_agg_out_top_n$source, mc2_edges_agg_out_top_n$target))

```

```{r}
mc2_edges_agg_out_top_n <- mc2_edges_agg_out_top_n %>%
  group_by(source, target) %>%
  mutate(total_shipped_weightkg = sum(sum_weightkg))

```

```{r}
mc2_edges_agg_vis_out <- mc2_edges_agg_out_top_n %>% 
  rename(from = source) %>% 
  rename(to = target) %>% 
  mutate(title = paste('Total shipment weight = ',total_shipped_weightkg, "\n HSCODE =", hscode))
```

```{r}
mc2_nodes_vis_out <- mc2_nodes_out %>% 
  mutate(title = paste('shpcountry =', shpcountry, ',',
                       'rcvcountry =', rcvcountry, ',',
                       '\n In-deg = ', measures_graph$in_deg_centrality, ',',
                       "\n Betweenness =", measures_graph$betweenness_centrality, ',',
                       "\n Out-deg =", measures_graph$out_deg_centrality))
```


```{r}

#| fig-width: 12
#| fig-asp: 0.555
set.seed(1234)
visNetwork(mc2_nodes_vis_out,
           mc2_edges_agg_vis_out,
           main = "Filtered Ego Network of top 4 Out-Degree companies",
           height = "600px", width = "100%") %>%
  visIgraphLayout(layout = "layout_with_kk") %>%
  visEdges(arrows = 'to',
           smooth = list(enables = TRUE,
                         type= 'straightCross'),
           shadow = FALSE,
           dash = FALSE) %>% 
  visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
             nodesIdSelection = TRUE) %>%
  visInteraction(hideEdgesOnDrag = TRUE) %>% 
  visLegend() %>%
  visLayout(randomSeed = 123)
```
```



```{r}
topn <- mc2_edges_agg_out_top_n %>%
  group_by(source, Year) %>%
  summarise(total_weight_by_year = sum(weights)) %>%
  ungroup() 

topn <- topn  %>%  group_by(source) %>%
  mutate(maxweightyear = as.character(Year[which.max(total_weight_by_year)])) %>%
  ungroup()

```

### Finding: there are some source companies that are only active in certain years, namely, 
These maybe involved in IUU, changing their names frequently. 

```

### new section. Compare the trading relationships of the Top 2 In-Degree companies: hǎi dǎn Corporation Wharf and Mar del Este CJSC 


```{r}
hai_dan_df<-mc2_edges_agg_vis_in %>%
  filter(to %in% 'hǎi dǎn Corporation Wharf')
```


```{r}
treemap(hai_dan_df,
        index=c("from"),
        vSize="weights",
        vColor="weights",
        type="value",
        palette="RdYlBu",
        title="Companies who Trade with hǎi dǎn Corporation Wharf in terms of weightkg")
```


```{r}
mar_del_df<-mc2_edges_agg_vis_in %>%
  filter(to %in% 'Mar del Este CJSC')
```


```{r}
treemap(mar_del_df,
        index=c("from"),
        vSize="weights",
        vColor="weights",
        type="value",
        palette="RdYlBu",
        title="Companies who Trade with Mar del Este CJSC in terms of weightkg")
```

## 4. References

Petrossian, G. Barthuly, B. Sonowski, M. (2022, March 31). Identifying Central Carriers and Detecting Key Communities Within the Global Fish Transshipment Networks

Park, A. Stamato, S. (2020). Social Network Analysis of Global Transshipment: A Framework for Discovering Illegal Fishing Networks

```{r}

```

```{r}

```

```{r}

```

